{
  "status": "success",
  "paper_id": "2502.00212",
  "bot_num": 1,
  "processed_date": "2025-06-05T20:50:36.440587",
  "all_summaries": [
    "The paper introduces Self-play Theorem Prover (STP), which combines conjecturer and prover roles to iteratively generate and prove conjectures. STP addresses the limitations of traditional expert iteration by self-generating conjectures and proofs, leading to improved performance on formal theorem proving tasks. Empirical results show that STP achieves higher accuracy and efficiency compared to existing methods, especially in scalable settings, and outperforms prior approaches on benchmarks like miniF2F-test and PutnamBench.",
    "This paper introduces a novel self-play theorem prover (STP) that combines a conjecturer and a prover to iteratively generate and verify mathematical conjectures, improving reasoning capabilities through mutual training. STP addresses the limitations of traditional reinforcement learning (RL) approaches by reducing reliance on external theorem datasets and enabling continuous self-improvement without additional data. The method outperforms existing baselines on formal proof benchmarks, achieving higher accuracy and efficiency in theorem proving, and demonstrates scalable performance across different theorem systems. The key innovation lies in the self-generated conjectures and adaptive curriculum learning, which enhance the model's ability to tackle complex and varied mathematical problems."
  ],
  "best_summary_idx": 1,
  "summary": "This paper introduces a novel self-play theorem prover (STP) that combines a conjecturer and a prover to iteratively generate and verify mathematical conjectures, improving reasoning capabilities through mutual training. STP addresses the limitations of traditional reinforcement learning (RL) approaches by reducing reliance on external theorem datasets and enabling continuous self-improvement without additional data. The method outperforms existing baselines on formal proof benchmarks, achieving higher accuracy and efficiency in theorem proving, and demonstrates scalable performance across different theorem systems. The key innovation lies in the self-generated conjectures and adaptive curriculum learning, which enhance the model's ability to tackle complex and varied mathematical problems.",
  "evaluation": "Step 1: Check for factual consistency by verifying if all claims in the summaries are supported by the source text.\nStep 2: Assess the engagingness by evaluating how well the summaries capture the novelty and significance of the research.\nStep 3: Compare the summaries to determine which one is the most accurate and engaging representation of the paper's contributions.\n\nFactual Consistency Scores:\nSummary 0: 3\nSummary 1: 2\n\nEngagingness Scores:\nSummary 0: 2\nSummary 1: 3\n\nBest Summary:\n1\nOkay, let's go through the evaluation steps as outlined.\n\n**Step 1: Check for factual consistency**  \nI need to verify if all claims in the summaries are supported by the source text.  \n- **Summary 0** mentions that STP combines conjecturer and prover roles, self-generates conjectures and proofs, and outperforms existing methods on benchmarks like miniF2F-test and PutnamBench. These points are all supported by the source text.  \n- **Summary 1** states that STP addresses RL limitations by reducing reliance on external datasets and enables continuous self-improvement. The source text does mention that STP doesn't require additional data and improves through self-play, so this is consistent. However, the claim about \"reducing reliance on external theorem datasets\" is not explicitly stated in the source text. The source text says STP generates its own conjectures,",
  "tweet": "\"\ud83d\ude80 This paper presents a novel self-play theorem prover, combining conjecturer & prover to improve reasoning via mutual training.",
  "real_tweet": "\"\ud83d\ude80 This paper presents a novel self-play theorem prover, combining conjecturer & prover to improve reasoning via mutual training.\n Link: https://arxiv.org/abs/2502.00212",
  "model_used": "Qwen/Qwen3-4B",
  "eval_mode": true
}