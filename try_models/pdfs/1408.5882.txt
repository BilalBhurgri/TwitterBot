# Convolutional Neural Networks for Sentence Classification

## 1 Introduction

Deep learning models have achieved remarkable results in computer vision and speech recognition in recent years. Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models and performing composition over the learned word vectors for classification . Word vectors, wherein words are projected from a sparse, 1-of-V encoding (here V is the vocabulary size) onto a lower dimensional vector space via a hidden layer, are essentially feature extractors that encode semantic features of words in their dimensions. In such dense representations, semantically close words are likewise close-in euclidean or cosine distance-in the lower dimensional vector space.

Convolutional neural networks (CNN) utilize layers with convolving filters that are applied to local features . Originally invented for computer vision, CNN models have subsequently been shown to be effective for NLP and have achieved excellent results in semantic parsing , search query retrieval , sentence modeling , and other traditional NLP tasks .

In the present work, we train a simple CNN with one layer of convolution on top of word vectors obtained from an unsupervised neural language model. These vectors were trained by on 100 billion words of Google News, and are publicly available. We initially keep the word vectors static and learn only the other parameters of the model. Despite little tuning of hyperparameters, this simple model achieves excellent results on multiple benchmarks, suggesting that the pre-trained vectors are 'universal' feature extractors that can be utilized for various classification tasks. Learning task-specific vectors through fine-tuning results in further improvements. We finally describe a simple modification to the architecture to allow for the use of both pre-trained and task-specific vectors by having multiple channels.

Our work is philosophically similar to which showed that for image classification, feature extractors obtained from a pretrained deep learning model perform well on a variety of tasks-including tasks that are very different from the original task for which the feature extractors were trained.

## 2 Model

The model architecture, shown in figure , is a slight variant of the CNN architecture of . Let x i R k be the k-dimensional word vector corresponding to the i-th word in the sentence. A sentence of length n (padded where

wait for the video and do n't rent it n x k representation of sentence with static and non-static channels Convolutional layer with multiple filter widths and feature maps Max-over-time pooling Fully connected layer with dropout and softmax output necessary) is represented as

where ⊕ is the concatenation operator. In general, let x i:i+j refer to the concatenation of words x i , x i+1 , . . . , x i+j . A convolution operation involves a filter w R hk , which is applied to a window of h words to produce a new feature. For example, a feature c i is generated from a window of words x i:i+h-1 by

Here b R is a bias term and f is a non-linear function such as the hyperbolic tangent. This filter is applied to each possible window of words in the sentence {x 1:h , x 2:h+1 , . . . , x n-h+1:n } to produce a feature map

with c R n-h+1 . We then apply a max-overtime pooling operation over the feature map and take the maximum value ĉ = max{c} as the feature corresponding to this particular filter. The idea is to capture the most important feature-one with the highest value-for each feature map. This pooling scheme naturally deals with variable sentence lengths.

We have described the process by which one feature is extracted from one filter. The model uses multiple filters (with varying window sizes) to obtain multiple features. These features form the penultimate layer and are passed to a fully connected softmax layer whose output is the probability distribution over labels.

In one of the model variants, we experiment with having two 'channels' of word vectors-one that is kept static throughout training and one that is fine-tuned via backpropagation (section 3.2). In the multichannel architecture, illustrated in figure 1, each filter is applied to both channels and the results are added to calculate c i in equation ( ). The model is otherwise equivalent to the single channel architecture.

## 2.1 Regularization

For regularization we employ dropout on the penultimate layer with a constraint on l 2 -norms of the weight vectors . Dropout prevents co-adaptation of hidden units by randomly dropping out-i.e., setting to zero-a proportion p of the hidden units during fowardbackpropagation. That is, given the penultimate layer z = [ĉ 1 , . . . , ĉm ] (note that here we have m filters), instead of using

for output unit y in forward propagation, dropout uses

where • is the element-wise multiplication operator and r R m is a 'masking' vector of Bernoulli random variables with probability p of being 1. Gradients are backpropagated only through the unmasked units. At test time, the learned weight vectors are scaled by p such that ŵ = pw, and ŵ is used (without dropout) to score unseen sentences. We additionally constrain l 2 -norms of the weight vectors by rescaling w to have ||w|| 2 = s whenever ||w|| 2 &gt; s after a gradient descent step.

## 3 Datasets and Experimental Setup

We test our model on various benchmarks. Summary statistics of the datasets are in table 1.

• MR: Movie reviews with one sentence per review. Classification involves detecting positive/negative reviews ). 3

• SST-1: Stanford Sentiment Treebank-an extension of MR but with train/dev/test splits provided and fine-grained labels (very positive, positive, neutral, negative, very negative), re-labeled by . 4

• SST-2: Same as SST-1 but with neutral reviews removed and binary labels.

• Subj: Subjectivity dataset where the task is to classify a sentence as being subjective or objective ).

• TREC: TREC question dataset-task involves classifying a question into 6 question types (whether the question is about person, location, numeric information, etc.) . 5

• CR: Customer reviews of various products (cameras, MP3s etc.). Task is predict positive/negative reviews ).

6 3 4 Data is actually provided at the phrase-level and hence we train the model on both phrases and sentences but only score on sentences at test time, as in Socher et al. (2013), Kalchbrenner et al. (2014), and Le and Mikolov (2014). Thus the training set is an order of magnitude larger than listed in table 1. 5 6 ∼ liub/FBS/sentiment-analysis.html

• MPQA: Opinion polarity detection subtask of the MPQA dataset . 7

## 3.1 Hyperparameters and Training

For all datasets we use: rectified linear units, filter windows (h) of 3, 4, 5 with 100 feature maps each, dropout rate (p) of 0.5, l 2 constraint (s) of 3, and mini-batch size of 50. These values were chosen via a grid search on the SST-2 dev set. We do not otherwise perform any datasetspecific tuning other than early stopping on dev sets. For datasets without a standard dev set we randomly select 10% of the training data as the dev set. Training is done through stochastic gradient descent over shuffled mini-batches with the Adadelta update rule .

## 3.2 Pre-trained Word Vectors

Initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set . We use the publicly available word2vec vectors that were trained on 100 billion words from Google News. The vectors have dimensionality of 300 and were trained using the continuous bag-of-words architecture . Words not present in the set of pre-trained words are initialized randomly.

## 3.3 Model Variations

We experiment with several variants of the model.

• CNN-rand: Our baseline model where all words are randomly initialized and then modified during training.

• CNN-static: A model with pre-trained vectors from word2vec. All wordsincluding the unknown ones that are randomly initialized-are kept static and only the other parameters of the model are learned.

• CNN-non-static: Same as above but the pretrained vectors are fine-tuned for each task.

• . MV-RNN: Matrix-Vector Recursive Neural Network with parse trees . RNTN: Recursive Neural Tensor Network with tensor-based feature function and parse trees . DCNN: Dynamic Convolutional Neural Network with k-max pooling . Paragraph-Vec: Logistic regression on top of paragraph vectors . CCAE: Combinatorial Category Autoencoders with combinatorial category grammar operators . Sent-Parser: Sentiment analysis-specific parser . NBSVM, MNB: Naive Bayes SVM and Multinomial Naive Bayes with uni-bigrams from . G-Dropout, F-Dropout: Gaussian Dropout and Fast Dropout from . Tree-CRF: Dependency tree with Conditional Random Fields . CRF-PR: Conditional Random Fields with Posterior Regularization . SVMS: SVM with uni-bi-trigrams, wh word, head word, POS, parser, hypernyms, and 60 hand-coded rules as features from .

to both channels, but gradients are backpropagated only through one of the channels. Hence the model is able to fine-tune one set of vectors while keeping the other static. Both channels are initialized with word2vec.

In order to disentangle the effect of the above variations versus other random factors, we eliminate other sources of randomness-CV-fold assignment, initialization of unknown word vectors, initialization of CNN parameters-by keeping them uniform within each dataset.

## 4 Results and Discussion

Results of our models against other methods are listed in table 2. Our baseline model with all randomly initialized words (CNN-rand) does not perform well on its own. While we had expected performance gains through the use of pre-trained vectors, we were surprised at the magnitude of the gains. Even a simple model with static vectors (CNN-static) performs remarkably well, giving competitive results against the more sophisticated deep learning models that utilize complex pooling schemes or require parse trees to be computed beforehand . These results suggest that the pretrained vectors are good, 'universal' feature extractors and can be utilized across datasets. Finetuning the pre-trained vectors for each task gives still further improvements (CNN-non-static).

## 4.1 Multichannel vs. Single Channel Models

We had initially hoped that the multichannel architecture would prevent overfitting (by ensuring that the learned vectors do not deviate too far from the original values) and thus work better than the single channel model, especially on smaller datasets. The results, however, are mixed, and further work on regularizing the fine-tuning process is warranted. For instance, instead of using an additional channel for the non-static portion, one could maintain a single channel but employ extra dimensions that are allowed to be modified during training.

Most Similar Words for Static Channel Non-static Channel bad good terrible terrible horrible horrible lousy lousy stupid good great nice bad decent terrific solid decent terrific n't os not ca never ireland nothing wo neither ! 2,500 2,500 entire lush jez beautiful changer terrific , decasia but abysmally dragon demise a valiant and

Table 3: Top 4 neighboring words-based on cosine similarity-for vectors in the static channel (left) and finetuned vectors in the non-static channel (right) from the multichannel model on the SST-2 dataset after training.

## 4.2 Static vs. Non-static Representations

As is the case with the single channel non-static model, the multichannel model is able to fine-tune the non-static channel to make it more specific to the task-at-hand. For example, good is most similar to bad in word2vec, presumably because they are (almost) syntactically equivalent. But for vectors in the non-static channel that were finetuned on the SST-2 dataset, this is no longer the case (table ). Similarly, good is arguably closer to nice than it is to great for expressing sentiment, and this is indeed reflected in the learned vectors. For (randomly initialized) tokens not the set of pre-trained vectors, fine-tuning allows them to learn more meaningful representations: the network learns that exclamation marks are associated with effusive expressions and that commas are conjunctive (table ).

## 4.3 Further Observations

We report on some further experiments and observations:

• report much worse results with a CNN that has essentially the same architecture as our single channel model. For example, their Max-TDN with randomly initialized words obtains 37.4% on the SST-1 dataset, compared to 45.0% for our model. We attribute such discrepancy to our CNN having much more capacity (multiple filter widths and feature maps).

• Dropout proved to be such a good regularizer that it was fine to use a larger than necessary network and simply let dropout regularize it. Dropout consistently added 2%-4% relative performance.

• When randomly initializing words not in word2vec, we obtained slight improvements by sampling each dimension from U [-a, a] where a was chosen such that the randomly initialized vectors have the same variance as the pre-trained ones. It would be interesting to see if employing more sophisticated methods to mirror the distribution of pre-trained vectors in the initialization process gives further improvements.

• We briefly experimented with another set of publicly available word vectors trained by on Wikipedia, and found that word2vec gave far superior performance. It is not clear whether this is due to 's architecture or the 100 billion word Google News dataset.

• Adadelta gave similar results to Adagrad but required fewer epochs.

## 5 Conclusion

In the present work we have described a series of experiments with convolutional neural networks built on top of word2vec. Despite little tuning of hyperparameters, a simple CNN with one layer of convolution performs remarkably well. Our results add to the well-established evidence that unsupervised pre-training of word vectors is an important ingredient in deep learning for NLP.